// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package wlgen

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadWlgen returns the embedded CollectionSpec for wlgen.
func loadWlgen() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_WlgenBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load wlgen: %w", err)
	}

	return spec, err
}

// loadWlgenObjects loads wlgen and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*wlgenObjects
//	*wlgenPrograms
//	*wlgenMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadWlgenObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadWlgen()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// wlgenSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type wlgenSpecs struct {
	wlgenProgramSpecs
	wlgenMapSpecs
	wlgenVariableSpecs
}

// wlgenProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type wlgenProgramSpecs struct {
}

// wlgenMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type wlgenMapSpecs struct {
	CfgMap           *ebpf.MapSpec `ebpf:"cfg_map"`
	LibcRangeMap     *ebpf.MapSpec `ebpf:"libc_range_map"`
	PathWhitelistMap *ebpf.MapSpec `ebpf:"path_whitelist_map"`
	ProfileBuf       *ebpf.MapSpec `ebpf:"profile_buf"`
	ProtectMap       *ebpf.MapSpec `ebpf:"protect_map"`
	StackDbgMap      *ebpf.MapSpec `ebpf:"stack_dbg_map"`
	StatsMap         *ebpf.MapSpec `ebpf:"stats_map"`
	WarnBuf          *ebpf.MapSpec `ebpf:"warn_buf"`
}

// wlgenVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type wlgenVariableSpecs struct {
}

// wlgenObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadWlgenObjects or ebpf.CollectionSpec.LoadAndAssign.
type wlgenObjects struct {
	wlgenPrograms
	wlgenMaps
	wlgenVariables
}

func (o *wlgenObjects) Close() error {
	return _WlgenClose(
		&o.wlgenPrograms,
		&o.wlgenMaps,
	)
}

// wlgenMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadWlgenObjects or ebpf.CollectionSpec.LoadAndAssign.
type wlgenMaps struct {
	CfgMap           *ebpf.Map `ebpf:"cfg_map"`
	LibcRangeMap     *ebpf.Map `ebpf:"libc_range_map"`
	PathWhitelistMap *ebpf.Map `ebpf:"path_whitelist_map"`
	ProfileBuf       *ebpf.Map `ebpf:"profile_buf"`
	ProtectMap       *ebpf.Map `ebpf:"protect_map"`
	StackDbgMap      *ebpf.Map `ebpf:"stack_dbg_map"`
	StatsMap         *ebpf.Map `ebpf:"stats_map"`
	WarnBuf          *ebpf.Map `ebpf:"warn_buf"`
}

func (m *wlgenMaps) Close() error {
	return _WlgenClose(
		m.CfgMap,
		m.LibcRangeMap,
		m.PathWhitelistMap,
		m.ProfileBuf,
		m.ProtectMap,
		m.StackDbgMap,
		m.StatsMap,
		m.WarnBuf,
	)
}

// wlgenVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadWlgenObjects or ebpf.CollectionSpec.LoadAndAssign.
type wlgenVariables struct {
}

// wlgenPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadWlgenObjects or ebpf.CollectionSpec.LoadAndAssign.
type wlgenPrograms struct {
}

func (p *wlgenPrograms) Close() error {
	return _WlgenClose()
}

func _WlgenClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed wlgen_x86_bpfel.o
var _WlgenBytes []byte
