package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/tcassar-diss/addrfilter/bpf/filter"
	"github.com/tcassar-diss/addrfilter/frontend"
	"github.com/urfave/cli/v2"
)

func main() {
	aCfg := &frontend.AddrfilterCfg{
		CmdCfg:  &frontend.CmdCfg{},
		Options: &frontend.GlobalFlags{},
	}

	gCfg := &frontend.GeneratorCfg{
		WhitelistPath: "",
		Options:       &frontend.GlobalFlags{},
		CmdCfg:        &frontend.CmdCfg{},
	}

	var (
		killAll bool
		warn    bool
	)

	app := &cli.App{
		Flags: []cli.Flag{
			&cli.BoolFlag{
				Name:        "profile",
				Usage:       "enable profiling mode (requires compiling with PROFILE macro defined)",
				Aliases:     []string{"p"},
				Destination: &aCfg.Options.Profile,
			},
			&cli.BoolFlag{
				Name:        "verbose",
				Usage:       "run the frontend in verbose mode; provides a dump of execution stats when complete",
				Aliases:     []string{"v"},
				Destination: &aCfg.Options.Verbose,
			},
			&cli.BoolFlag{
				Name:        "syso-wl",
				Usage:       "needed when whitelists were generated by syso",
				Destination: &aCfg.Options.SysoWhitelist,
				DefaultText: "true",
			},
			&cli.BoolFlag{
				Name:        "spawn-root",
				Usage:       "spawn the executable with root privileges. ONLY FOR DEVELOPMENT USE!",
				Destination: &aCfg.CmdCfg.SpawnRoot,
			}, &cli.BoolFlag{
				Name:        "kill-all",
				Usage:       "configures addrfilter to kill all tracked processes if one trips the filter; overrides warn",
				Destination: &killAll,
			}, &cli.BoolFlag{
				Name:        "warn",
				Usage:       "configures addrfilter to only warn the user whenever a process trips the filter",
				Destination: &warn,
			},
		},
		Name:      "addrfilter",
		ArgsUsage: "<whitelist path> <executable> [exec args...]",
		Usage:     "fine grained system call filtering",
		Action: func(cCtx *cli.Context) error {
			if nArgs := cCtx.Args().Len(); nArgs < 2 {
				_ = cli.ShowAppHelp(cCtx)

				return cli.Exit(
					fmt.Sprintf("\nERROR: Too few arguments! Expected >2, got %d", nArgs),
					1,
				)
			}

			aCfg.WhitelistPath = cCtx.Args().Get(0)
			aCfg.CmdCfg.ExecPath = cCtx.Args().Get(1)
			aCfg.CmdCfg.ExecArgs = cCtx.Args().Slice()[2:]

			if warn {
				aCfg.WarnMode = &filter.Warn
			} else if killAll {
				aCfg.WarnMode = &filter.KillAll
			} else {
				aCfg.WarnMode = &filter.KillPID
			}

			if aCfg.Options.Verbose {
				bts, err := json.Marshal(aCfg)
				if err != nil {
					panic(err)
				}

				fmt.Println(string(bts))
			}

			if err := frontend.RunAddrfilter(aCfg); err != nil {
				return cli.Exit(
					fmt.Sprintf("addrfilter encounted an error it couldn't recover from: %v", err),
					2,
				)
			}

			return nil
		},
	}

	app.Commands = []*cli.Command{
		{
			Name:  "generate",
			Usage: "generates whitelists for addrfilter via dynamic analysis",
			Action: func(cCtx *cli.Context) error {
				if nArgs := cCtx.Args().Len(); nArgs < 1 {
					_ = cli.ShowAppHelp(cCtx)

					return cli.Exit(
						fmt.Sprintf("\nERROR: Too few arguments! Expected >1, got %d", nArgs),
						1,
					)
				}

				gCfg.CmdCfg.ExecPath = cCtx.Args().Get(0)
				gCfg.CmdCfg.ExecArgs = cCtx.Args().Slice()[1:]

				gCfg.WhitelistPath = fmt.Sprintf("%s-whitelist.toml", gCfg.CmdCfg.ExecPath)

				if aCfg.Options.Verbose {
					bts, err := json.Marshal(gCfg)
					if err != nil {
						panic(err)
					}

					fmt.Println(string(bts))
				}

				if err := frontend.RunGenerator(gCfg); err != nil {
					return cli.Exit(
						fmt.Sprintf("addrfilter encounted an error while generating a whitelist it couldn't recover from: %v", err),
						2,
					)
				}

				return nil
			},
		},
	}
	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}
